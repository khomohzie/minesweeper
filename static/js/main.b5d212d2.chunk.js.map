{"version":3,"sources":["util/mineColors.js","components/Circle.jsx","components/Cell.jsx","util/createBoard.js","util/reveal.js","components/Timer.jsx","components/Modal.jsx","components/TopBar.jsx","components/Board.jsx","App.js","reportWebVitals.js","index.js"],"names":["mineColor","colors","Math","floor","random","length","Circle","style","display","justifyContent","alignItems","height","width","borderRadius","background","bombChexPattern","x","y","chexPattern","numColorCode","num","Cell","details","updateFlag","revealCell","block","color","value","fontWeight","fontSize","cursor","revealed","onContextMenu","e","onClick","flagged","randomNum","min","max","timeIntervalId","Modal","restartGame","useState","render","setRender","useEffect","setTimeout","opacity","position","id","className","Timer","gameOver","sendTime","time","setTime","sTime","setSTime","clearInterval","role","aria-label","paddingRight","TopBar","padding","flexDirection","paddingBottom","Board","grid","setGrid","nonMineCount","setNonMineCount","mineLocations","setMineLocations","setGameOver","restart","setRestart","newTime","freshBoard","newBoard","row","col","bombs","board","mineLocation","subCol","push","bombsCount","roww","coll","createBoard","preventDefault","console","log","newGrid","JSON","parse","stringify","newGridValues","newNonMineCount","i","arr","newNonMinesCount","flipped","single","pop","completeTime","map","singleRow","index1","singleBlock","index2","App","fontFamily","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b5d212d2.chunk.js","sourcesContent":["export const mineColor = () => {\n  let colors = [\"orange\", \"darkgreen\", \"cyan\", \"violet\", \"yellow\"];\n  return colors[Math.floor(Math.random() * colors.length)];\n};\n","import React from 'react'\r\n\r\nconst Circle = () => {\r\n    return (\r\n        <div\r\n            style={{\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n            }}\r\n        >\r\n            <div\r\n                style={{\r\n                    height: 23,\r\n                    width: 23,\r\n                    borderRadius: 20,\r\n                    background: \"rgba(0,0,0,0.4)\",\r\n                }}\r\n            ></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Circle\r\n","import React from 'react'\r\nimport { mineColor } from '../util/mineColors';\r\nimport Circle from './Circle';\r\n\r\nconst Cell = ({ details, updateFlag, revealCell }) => {\r\n\r\n    const style = {\r\n        block: {\r\n            width: 40,\r\n            height: 40,\r\n            color: numColorCode(details.value),\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n            fontWeight: 800,\r\n            fontSize: 30,\r\n            cursor: \"pointer\",\r\n            background: details.revealed\r\n                ? details.value === \"X\"\r\n                    ? mineColor()\r\n                    : bombChexPattern(details.x, details.y)\r\n                : chexPattern(details.x, details.y),\r\n        },\r\n    };\r\n\r\n    return (\r\n        <div\r\n            onContextMenu={(e) => updateFlag(e, details.x, details.y)}\r\n            onClick={() => revealCell(details.x, details.y)}\r\n            style={style.block}\r\n        >\r\n            {!details.revealed && details.flagged ? (\r\n                \"🚩\"\r\n            ) : details.revealed && details.value !== 0 ? (\r\n                details.value === \"X\" ? (\r\n                    <Circle />\r\n                ) : (\r\n                        details.value\r\n                    )\r\n            ) : (\r\n                        \"\"\r\n                    )}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst bombChexPattern = (x, y) => {\r\n    if (x % 2 === 0 && y % 2 === 0) {\r\n        return \"#e5c29f\";\r\n    } else if (x % 2 === 0 && y % 2 !== 0) {\r\n        return \"#d7b899\";\r\n    } else if (x % 2 !== 0 && y % 2 === 0) {\r\n        return \"#d7b899\";\r\n    } else {\r\n        return \"#e5c29f\";\r\n    }\r\n};\r\n\r\nconst chexPattern = (x, y) => {\r\n    if (x % 2 === 0 && y % 2 === 0) {\r\n        return \"#aad751\";\r\n    } else if (x % 2 === 0 && y % 2 !== 0) {\r\n        return \"#a2d249\";\r\n    } else if (x % 2 !== 0 && y % 2 === 0) {\r\n        return \"#a2d249\";\r\n    } else {\r\n        return \"#aad751\";\r\n    }\r\n};\r\n\r\nconst numColorCode = (num) => {\r\n    if (num === 1) {\r\n        return \"#1976d2\";\r\n    } else if (num === 2) {\r\n        return \"#388d3c\";\r\n    } else if (num === 3) {\r\n        return \"#d33030\";\r\n    } else if (num === 4) {\r\n        return \"#7c21a2\";\r\n    } else if (num === 5) {\r\n        return \"#1976d2\";\r\n    } else if (num === 6) {\r\n        return \"#1976d2\";\r\n    } else {\r\n        return \"white\";\r\n    }\r\n};\r\n\r\nexport default Cell\r\n","/* eslint-disable import/no-anonymous-default-export */\r\nexport default (row, col, bombs) => {\r\n    let board = [];\r\n    let mineLocation = [];\r\n    // Create blank board\r\n\r\n    // x = column\r\n    for (let x = 0; x < row; x++) {\r\n        let subCol = [];\r\n        for (let y = 0; y < col; y++) {\r\n            subCol.push({\r\n                value: 0,\r\n                revealed: false,\r\n                x: x,\r\n                y: y,\r\n                flagged: false,\r\n            });\r\n        }\r\n        board.push(subCol);\r\n    }\r\n\r\n    // Randomize Bomb Placement\r\n    let bombsCount = 0;\r\n    while (bombsCount < bombs) {\r\n        let x = randomNum(0, row - 1);\r\n        let y = randomNum(0, col - 1);\r\n\r\n        if (board[x][y].value === 0) {\r\n            board[x][y].value = \"X\";\r\n            mineLocation.push([x, y]);\r\n            bombsCount++;\r\n        }\r\n    }\r\n\r\n    // Add Numbers\r\n    for (let roww = 0; roww < row; roww++) {\r\n        for (let coll = 0; coll < col; coll++) {\r\n            if (board[roww][coll].value === \"X\") {\r\n                continue;\r\n            }\r\n\r\n            // Top\r\n            if (roww > 0 && board[roww - 1][coll].value === \"X\") {\r\n                board[roww][coll].value++;\r\n            }\r\n\r\n            // Top Right\r\n            if (\r\n                roww > 0 &&\r\n                coll < col - 1 &&\r\n                board[roww - 1][coll + 1].value === \"X\"\r\n            ) {\r\n                board[roww][coll].value++;\r\n            }\r\n\r\n            // Right\r\n            if (coll < col - 1 && board[roww][coll + 1].value === \"X\") {\r\n                board[roww][coll].value++;\r\n            }\r\n\r\n            // Botoom Right\r\n            if (\r\n                roww < row - 1 &&\r\n                coll < col - 1 &&\r\n                board[roww + 1][coll + 1].value === \"X\"\r\n            ) {\r\n                board[roww][coll].value++;\r\n            }\r\n\r\n            // Bottom\r\n            if (roww < row - 1 && board[roww + 1][coll].value === \"X\") {\r\n                board[roww][coll].value++;\r\n            }\r\n\r\n            // Bottom Left\r\n            if (\r\n                roww < row - 1 &&\r\n                coll > 0 &&\r\n                board[roww + 1][coll - 1].value === \"X\"\r\n            ) {\r\n                board[roww][coll].value++;\r\n            }\r\n\r\n            // LEft\r\n            if (coll > 0 && board[roww][coll - 1].value === \"X\") {\r\n                board[roww][coll].value++;\r\n            }\r\n\r\n            // Top Left\r\n            if (roww > 0 && coll > 0 && board[roww - 1][coll - 1].value === \"X\") {\r\n                board[roww][coll].value++;\r\n            }\r\n        }\r\n    }\r\n    return { board, mineLocation };\r\n};\r\n\r\nfunction randomNum(min = 0, max) {\r\n    // min and max included\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n","export const revealed = (arr, x, y, newNonMinesCount) => {\r\n    console.log(arr[x][y]);\r\n    if (arr[x][y].revealed) {\r\n        // console.log(arr[x][y])\r\n        return;\r\n    }\r\n\r\n    // Stack of all the cells which we\r\n    // would like to reveal/flip\r\n    let flipped = [];\r\n    flipped.push(arr[x][y]);\r\n    while (flipped.length !== 0) {\r\n        let single = flipped.pop();\r\n\r\n        if (!single.revealed) {\r\n            newNonMinesCount--;\r\n            single.revealed = true;\r\n        }\r\n\r\n        if (single.value !== 0) {\r\n            break;\r\n        }\r\n\r\n        //Top - Left\r\n        if (\r\n            single.x > 0 &&\r\n            single.y > 0 &&\r\n            arr[single.x - 1][single.y - 1].value === 0 &&\r\n            !arr[single.x - 1][single.y - 1].revealed\r\n        ) {\r\n            flipped.push(arr[single.x - 1][single.y - 1]);\r\n        }\r\n\r\n        // Bottom - Right\r\n        if (\r\n            single.x < arr.length - 1 &&\r\n            single.y < arr[0].length - 1 &&\r\n            arr[single.x + 1][single.y + 1].value === 0 &&\r\n            !arr[single.x + 1][single.y + 1].revealed\r\n        ) {\r\n            flipped.push(arr[single.x + 1][single.y + 1]);\r\n        }\r\n\r\n        // Bottom - Left\r\n        if (\r\n            single.x < arr.length - 1 &&\r\n            single.y > 0 &&\r\n            arr[single.x + 1][single.y - 1].value === 0 &&\r\n            !arr[single.x + 1][single.y - 1].revealed\r\n        ) {\r\n            flipped.push(arr[single.x + 1][single.y - 1]);\r\n        }\r\n\r\n        // Top - Right\r\n        if (\r\n            single.x > 0 &&\r\n            single.y < arr[0].length - 1 &&\r\n            arr[single.x - 1][single.y + 1].value === 0 &&\r\n            !arr[single.x - 1][single.y + 1].revealed\r\n        ) {\r\n            flipped.push(arr[single.x - 1][single.y + 1]);\r\n        }\r\n\r\n        // Single ones\r\n\r\n        // Top\r\n        if (\r\n            single.x > 0 &&\r\n            arr[single.x - 1][single.y].value === 0 &&\r\n            !arr[single.x - 1][single.y].revealed\r\n        ) {\r\n            flipped.push(arr[single.x - 1][single.y]);\r\n        }\r\n\r\n        // Bottom\r\n        if (\r\n            single.x < arr.length - 1 &&\r\n            arr[single.x + 1][single.y].value === 0 &&\r\n            !arr[single.x + 1][single.y].revealed\r\n        ) {\r\n            flipped.push(arr[single.x + 1][single.y]);\r\n        }\r\n\r\n        // Left\r\n        if (\r\n            single.y > 0 &&\r\n            arr[single.x][single.y - 1].value === 0 &&\r\n            !arr[single.x][single.y - 1].revealed\r\n        ) {\r\n            flipped.push(arr[single.x][single.y - 1]);\r\n        }\r\n\r\n        // Right\r\n        if (\r\n            single.y < arr[0].length - 1 &&\r\n            arr[single.x][single.y + 1].value === 0 &&\r\n            !arr[single.x][single.y + 1].revealed\r\n        ) {\r\n            flipped.push(arr[single.x][single.y + 1]);\r\n        }\r\n\r\n        // Start Revealing Items\r\n        if (\r\n            single.x > 0 &&\r\n            single.y > 0 &&\r\n            !arr[single.x - 1][single.y - 1].revealed\r\n        ) {\r\n            //Top Left Reveal\r\n\r\n            arr[single.x - 1][single.y - 1].revealed = true;\r\n            newNonMinesCount--;\r\n        }\r\n\r\n        if (single.y > 0 && !arr[single.x][single.y - 1].revealed) {\r\n            // Left Reveal\r\n            arr[single.x][single.y - 1].revealed = true;\r\n            newNonMinesCount--;\r\n        }\r\n\r\n        if (\r\n            single.x < arr.length - 1 &&\r\n            single.y > 0 &&\r\n            !arr[single.x + 1][single.y - 1].revealed\r\n        ) {\r\n            //Bottom Left Reveal\r\n            arr[single.x + 1][single.y - 1].revealed = true;\r\n            newNonMinesCount--;\r\n        }\r\n\r\n        if (single.x > 0 && !arr[single.x - 1][single.y].revealed) {\r\n            //Top Reveal\r\n            arr[single.x - 1][single.y].revealed = true;\r\n            newNonMinesCount--;\r\n        }\r\n\r\n        if (single.x < arr.length - 1 && !arr[single.x + 1][single.y].revealed) {\r\n            // Bottom Reveal\r\n            arr[single.x + 1][single.y].revealed = true;\r\n            newNonMinesCount--;\r\n        }\r\n\r\n        if (\r\n            single.x > 0 &&\r\n            single.y < arr[0].length - 1 &&\r\n            !arr[single.x - 1][single.y + 1].revealed\r\n        ) {\r\n            // Top Right Reveal\r\n            arr[single.x - 1][single.y + 1].revealed = true;\r\n            newNonMinesCount--;\r\n        }\r\n\r\n        if (single.y < arr[0].length - 1 && !arr[single.x][single.y + 1].revealed) {\r\n            //Right Reveal\r\n            arr[single.x][single.y + 1].revealed = true;\r\n            newNonMinesCount--;\r\n        }\r\n\r\n        if (\r\n            single.x < arr.length - 1 &&\r\n            single.y < arr[0].length - 1 &&\r\n            !arr[single.x + 1][single.y + 1].revealed\r\n        ) {\r\n            // Bottom Right Reveal\r\n            arr[single.x + 1][single.y + 1].revealed = true;\r\n            newNonMinesCount--;\r\n        }\r\n    }\r\n\r\n    return { arr, newNonMinesCount };\r\n};\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nlet timeIntervalId;\r\n\r\nconst Timer = ({ gameOver, sendTime }) => {\r\n\r\n    let [time, setTime] = useState(0);\r\n    let [sTime, setSTime] = useState(0);\r\n\r\n    useEffect(() => {\r\n        if (time > 0 && gameOver) {\r\n            setSTime(time);\r\n            setTime(0);\r\n        }\r\n    }, [gameOver, time]);\r\n\r\n    useEffect(() => {\r\n        const incrementTime = () => {\r\n            let newTime = time + 1;\r\n            setTime(newTime);\r\n        };\r\n        timeIntervalId = setTimeout(() => {\r\n            incrementTime();\r\n        }, 1000);\r\n        if (gameOver) {\r\n            //   let updatedTime = JSON.parse(JSON.stringify(time));\r\n\r\n            clearInterval(timeIntervalId);\r\n        }\r\n    }, [time, setTime, gameOver, sendTime]);\r\n\r\n    return (\r\n        <div style={{ color: \"white\", fontSize: 20 }}>\r\n            <span role=\"img\" aria-label=\"clock\" style={{ paddingRight: 10 }}>\r\n                ⏰\r\n            </span>\r\n            {gameOver ? sTime : time}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Timer\r\n","import React, { useState, useEffect } from 'react'\r\n\r\nconst Modal = ({ restartGame }) => {\r\n\r\n    const [render, setRender] = useState(false);\r\n\r\n    useEffect(() => {\r\n        setTimeout(() => {\r\n            setRender(true);\r\n        }, 1000);\r\n    }, []);\r\n\r\n    return (\r\n        <div\r\n            style={{\r\n                opacity: render ? 1 : 0,\r\n                height: \"100%\",\r\n                width: \"100%\",\r\n                position: \"absolute\",\r\n                background: \"rgba(0,0,0,0.3)\",\r\n            }}\r\n        >\r\n            <div id=\"gameOverImage\"></div>\r\n            <div className=\"tryAgain\" onClick={() => restartGame()}>\r\n                Try Again\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Modal\r\n","import React from 'react'\r\nimport Timer from './Timer'\r\n\r\nconst TopBar = ({ gameOver, setTime }) => {\r\n    return (\r\n        <div\r\n            style={{\r\n                background: \"#4a752c\",\r\n                padding: \"10px 0\",\r\n                display: \"flex\",\r\n                flexDirection: \"row\",\r\n                justifyContent: \"space-around\",\r\n                alignItems: \"center\",\r\n            }}\r\n        >\r\n            <span role=\"img\" aria-label=\"flag\" style={{ paddingBottom: 10 }}>\r\n                🚩\r\n            </span>\r\n            <Timer gameOver={gameOver} sendTime={setTime} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TopBar\r\n","import React, { useState, useEffect } from 'react'\r\nimport Cell from './Cell';\r\nimport createBoard from '../util/createBoard'\r\nimport { revealed } from '../util/reveal';\r\nimport Modal from './Modal'\r\nimport TopBar from './TopBar'\r\n\r\nconst Board = () => {\r\n\r\n    const [grid, setGrid] = useState([]);\r\n    const [nonMineCount, setNonMineCount] = useState(0);\r\n    const [mineLocations, setMineLocations] = useState([]);\r\n    const [gameOver, setGameOver] = useState(false);\r\n    const [restart, setRestart] = useState(false);\r\n    const [newTime, setTime] = useState(0);\r\n\r\n    // ComponentDidMount\r\n    useEffect(() => {\r\n        // Calling the function to create a board\r\n        freshBoard();\r\n    }, [restart, setRestart])\r\n\r\n    // Creating a board\r\n    const freshBoard = () => {\r\n        const newBoard = createBoard(10, 15, 15);\r\n\r\n        setNonMineCount(10 * 15 - 15);\r\n        setMineLocations(newBoard.mineLocation);\r\n        setGrid(newBoard.board);\r\n        setTime(0);\r\n        setGameOver(false);\r\n        setRestart(false);\r\n    };\r\n\r\n    const restartGame = () => {\r\n        freshBoard();\r\n        setGameOver(false);\r\n    };\r\n\r\n    // On Right Click, Flag Cell\r\n    const updateFlag = (e, x, y) => {\r\n        e.preventDefault();\r\n        console.log(\"Right click\");\r\n\r\n        let newGrid = JSON.parse(JSON.stringify(grid));\r\n        console.log(newGrid[x][y]);\r\n\r\n        newGrid[x][y].flagged = true;\r\n        setGrid(newGrid);\r\n    }\r\n\r\n    // Reveal Cell\r\n    // const revealCell = (x, y) => {\r\n    //     let newGrid = JSON.parse(JSON.stringify(grid));\r\n\r\n    //     if (newGrid[x][y].value === \"X\") {\r\n    //         // alert(\"Mine found!\")\r\n    //         for (let i = 0; i < mineLocations.length; i++) {\r\n    //             newGrid[mineLocations[i][0]][mineLocations[i][1]].revealed = true;\r\n    //         }\r\n\r\n    //         setGrid(newGrid);\r\n    //         setGameOver(true);\r\n    //     } else {\r\n    //         let newRevealedBoard = revealed(newGrid, x, y, nonMineCount);\r\n\r\n    //         setGrid(newRevealedBoard.arr);\r\n    //         setNonMineCount(newRevealedBoard.newNonMinesCount);\r\n\r\n    //         if (newRevealedBoard.newNonMinesCount === 0) {\r\n    //             setGameOver(true);\r\n    //         }\r\n    //     }\r\n    // }\r\n\r\n    const revealCell = (x, y, e) => {\r\n        let newGridValues = JSON.parse(JSON.stringify(grid));\r\n        let newNonMineCount = nonMineCount;\r\n        if (newGridValues[x][y].value === \"X\") {\r\n            for (let i = 0; i < mineLocations.length; i++) {\r\n                if (\r\n                    !newGridValues[mineLocations[i][0]][mineLocations[i][1]].revealed\r\n                ) {\r\n                    // setInterval(() => {\r\n                    newGridValues[mineLocations[i][0]][\r\n                        mineLocations[i][1]\r\n                    ].revealed = true;\r\n                    setGrid(newGridValues);\r\n\r\n                    // }, 500);\r\n                }\r\n            }\r\n            setGameOver(true);\r\n        } else {\r\n            // newGridValues[x][y].revealed = true;\r\n            newGridValues = revealed(newGridValues, x, y, newNonMineCount);\r\n            if (!newGridValues) {\r\n                return;\r\n            }\r\n            setGrid(newGridValues.arr);\r\n            setNonMineCount(newGridValues.newNonMineCount);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <TopBar gameOver={gameOver} setTime={setTime} newTime={newTime} />\r\n            <div\r\n                style={{\r\n                    display: \"flex\",\r\n                    flexDirection: \"column\",\r\n                    alignItems: \"center\",\r\n                    position: \"relative\",\r\n                }}\r\n            >\r\n                {gameOver && <Modal restartGame={restartGame} completeTime={newTime} />}\r\n                {grid.map((singleRow, index1) => {\r\n                    return (\r\n                        <div key={index1} style={{ display: \"flex\" }}>\r\n                            {singleRow.map((singleBlock, index2) => {\r\n                                return (\r\n                                    <Cell\r\n                                        details={singleBlock}\r\n                                        updateFlag={updateFlag}\r\n                                        revealCell={revealCell}\r\n                                        key={index2}\r\n                                    />\r\n                                )\r\n                            })}\r\n                        </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default Board\r\n","import './App.css';\nimport Board from './components/Board';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1 style={{ fontFamily: \"cursive\", color: \"rgb(35, 51, 41)\" }}>Minesweeper</h1>\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}